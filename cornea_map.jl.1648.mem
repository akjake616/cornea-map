        - using BatchAssign
        - using LinearAlgebra
        - using Infiltrator
        - using PlotlyJS
        - using FFMPEG
        - using Base.Threads
        - 
        - # basic parameters
      512 Base.@kwdef mutable struct Parameters
        -     Dc = 29.74 # cornea diameter (nm)
        -     Nc = 180 #86775 # number of cornea fibers
        -     Sx = 1000 # 22000 # space lengh in x (nm)
        -     Sy = 1000 # 30000 # space lengh in y (nm)
        -     ds = 10 # grid size (nm)
        -     r = 59.48 # spacing between cornea fibers (nm)
        -     Nx = round(Int, Sx / ds)
        -     Ny = round(Int, Sy / ds)
        -     xrange = [0, Sx] # plot range in x (nm)
        -     yrange = [0, Sy] # plot range in y (nm) 
        -     drift = 20 
        - end
        - 
        - mutable struct CorneaList
        -     pos::Matrix{Float64}
        -     nb::Vector{Vector{Int}}
        - end
        - 
        - function generate_pos(sx, sy, d)
  1709664     return [(sx - d) * rand() + par.Dc / 2, (sy - d) * rand() + d / 2]
        - end
        - 
        - function find_neighbor(pos::Matrix{<:Real})
        0     N = size(pos, 1)
     2976     neighbor = Vector{Vector{Int}}(undef, N)
     3264     dif = zeros(N)
        -     
        0     @views for n in 1:N
        0         @threads for nc in 1:N
        -             dif[nc] = norm(pos[nc] .- pos[n])
        -         end
        0         dif[n] = Inf
  3110352         neighbor[n] = findall(x -> x < par.r * sqrt(par.drift * 2), dif)
        0         println(n)
        0     end
        0     return neighbor
        - end
        - 
        - function init_cornea(par::Parameters)
        0     cor_pos = zeros(par.Nc, 2)
        -     pass = false
      160     pos = zeros(2)
      128     @views for n = 1:par.Nc
        -         # pos[1] = (par.Sx - par.Dc) * rand() + par.Dc / 2
        -         # pos[2] = (par.Sy - par.Dc) * rand() + par.Dc / 2
     5760         pos .= generate_pos(par.Sx, par.Sy, par.Dc)
        0         if n == 1
      384             cor_pos[n, :] .= pos
        -         else
        0             while !pass
   854720                 for nc in 1:n
111804624                     if norm(cor_pos[nc, :] .- pos) <= par.r
        -                         # pos[1] = (par.Sx - par.Dc) * rand() + par.Dc / 2
        -                         # pos[2] = (par.Sy - par.Dc) * rand() + par.Dc / 2
   207952                         pos .= generate_pos(par.Sx, par.Sy, par.Dc)
        -                         break
        -                     end
        0                     if nc == n
        -                         pass = true
        -                     end
 24418112                 end
        0             end
    51488             cor_pos[n, :] .= pos
        -             pass = false
        -         end
        0         println(n)
    11456     end
        -     
        0     cor_ind = find_neighbor(cor_pos)
        -     # cor_ind = []
       64     cl = CorneaList(cor_pos, cor_ind)
        0     return cl
        - end
        - 
        - function update_cornea!(cl::CorneaList, par::Parameters)
        -     pass = false
    16024     tmp = zeros(2)
        0     N = size(cl.pos, 1)
   326704     dif = zeros(N)
        0     @views for n in 1:N
        -         pass = false
        0         while !pass
        0             fill!(dif, Inf)
        -             # @all cl.pos[n, 1] cl.pos[n, 2] += (rand()-0.5)*d
  5847712             tmp[1] = cl.pos[n, 1] + (rand()-0.5)*par.drift*2
  5847744             tmp[2] = cl.pos[n, 2] + (rand()-0.5)*par.drift*2
        -             # @threads for nc in 1:N
        -             #     dif[nc] = norm(tmp .- cl.pos[nc, :])
        -             # end
        -             # dif[n] = Inf
        -             # if all(x -> x >= par.r, dif)
        -             #     cl.pos[n, :] .= tmp
        -             #     pass = true
        -             # end
        -             # dif = zeros(length(cl.nb[n]))
        0             for nn in 1:length(cl.nb[n])
662081472                 dif[nn] = norm(tmp.- cl.pos[cl.nb[n][nn], :])
        0             end
        -             
  2339136             if all(dif .> par.r)
        0                 cl.pos[n, :] .= tmp
        -                 pass = true
        -             end
        0         end
        0     end
        0     return nothing
        - end
        - 
        - function layout_cornea(cl::CorneaList, par::Parameters)
     1168     layout = Layout(
        -         template = "plotly_white",
        -         plot_bgcolor = "rgb(43,95,117)", # NOSHIMEHANA
        -         # xaxis=attr(scaleanchor="y"),
        -         xaxis = attr(range = par.xrange, title_text = "x (nm)"),
        -         yaxis = attr(range = par.yrange, title_text = "y (nm)"),
        -         shapes = [
        -         ],
        -         height = 500,
        -         width  = round(Int, 500/diff(par.xrange)[1]*diff(par.yrange)[1]),
        -     )
        0     layout_include!(layout, cl, par)
        0     return layout
        - end
        - 
        - function layout_include!(layout::PlotlyJS.Layout, cl::CorneaList, par::Parameters)
     9696     layout.shapes = []
    12928     for n in 1:par.Nc
  3159088         if cl.pos[n, 1] > par.xrange[1] &&
        -             cl.pos[n, 1] < par.xrange[2] &&
        -             cl.pos[n, 2] > par.yrange[1] &&
        -             cl.pos[n, 2] < par.yrange[2]
 10324688             push!(
        -                 layout.shapes,
        -                 circle(
        -                     xref = "x",
        -                     yref = "y",
        -                     fillcolor = "rgb(251,226,81)", # KIHADA
        -                     line_width = 0,
        -                     x0 = cl.pos[n, 1] - par.Dc / 2,
        -                     y0 = cl.pos[n, 2] - par.Dc / 2,
        -                     x1 = cl.pos[n, 1] + par.Dc / 2,
        -                     y1 = cl.pos[n, 2] + par.Dc / 2,
        -                 ),
        -             )
        -         end
  1157056     end
        0     return nothing
        - end
        - 
        - function update_plot!(plt::PlotlyJS.SyncPlot, cl::CorneaList, par::Parameters)
        0     layout_include!(plt.plot.layout, cl, par)
        0     react!(plt, plt.plot.data, plt.plot.layout)
        - end
        - 
        - function plot_cornea(cl::CorneaList, par::Parameters)
        0     layout = layout_cornea(cl, par)
     1376     plt = plot(scatter(), layout)
        0     return plt
        - end
        - 
        - ## script
        - 
        - par = Parameters()
        - @time cl = init_cornea(par)
        - 
        - plt = plot_cornea(cl, par)
        - display(plt)
        - 
        - if !isdir("tmp")
        -     mkdir("tmp")
        - end
        - 
        0 for nt in 1:100
        0     update_cornea!(cl, par)
        0     update_plot!(plt, cl, par)
    35584     filename = "./tmp/snap_" * lpad(nt, 3, '0') * ".png"
    25600     savefig(plt, filename; 
        -         height = 500,
        -         width  = round(Int, 500/diff(par.xrange)[1]*diff(par.yrange)[1]),)
        -     # sleep(0.1)
        0     println(nt)
        0 end
        - 
        - framerate = 10
        - gifname = "output.gif"
        - FFMPEG.ffmpeg_exe(`-framerate $(framerate) -f image2 -i ./tmp/snap_%03d.png -y $(gifname)`)
        - 
        - # if isdir("tmp")
        - #     rm("tmp"; recursive=true)
        - # end
